START:
LDA 2000H ;; GET DATA FROM SWITCHES
CPI E3H ;; COMPARE NUMBER
;; WITH -99 (1x1100011)
JZ FORM_NEGATIVE ;; IN CASE OF EQUALITY
;; GO TO FORM_NEGATIVE
JNC LO_SYMBOL ;; IN CASE OF LESS
;; OF -99 SEND -LO OUT
CPI 80H ;; COMPARE WITH -128
JNC FORM_NEGATIVE ;; IN CASE OF GREATER
;; THAN NEGATIVE LIMIT
;; FIND NEGATIVE NUM
CPI 63H ;; COMPARE WITH 99
JZ FORM_NUMBER ;; IN CASE OF EQUAL
;; GO TO FORM_NUMBER
JNC HI_SYMBOL ;; IN CASE OF GREATER
;; SEND HI OUT
JMP FORM_NUMBER ;; IN CASE OF LESS
;; GO TO FORM_NUMBER
HLT
HI_SYMBOL: ;; HI IS H: 11 HEX
;; CODE & I:19 HEX CODE
MVI B,02H ;; GET 7-SEG DISPLAY FOR H
MVI C,89H ;; C <- 10001001 == H
;; IN NEGATIVE LOGIC
CALL DISPLAY ;; GET DISPLAY
MVI B,01H ;; GET 7-SEG DISPLAY FOR I
MVI C,F9H ;; C <- 11111001 == I
;; IN NEGATIVE LOGIC
CALL DISPLAY ;; GET DISPLAY
JMP START ;; WE ARE DONE
LO_SYMBOL: ;; LO IS -: L: 12 HEX
;; CODE & O: 15 HEX CODE
MVI B,04H ;; GET 7-SEG DISPLAY FOR '-'
MVI C,BFH ;; C <- 10111111 == '-'
;; IN NEGATIVE LOGIC
CALL DISPLAY ;; GET DISPLAY
MVI B,02H ;; GET 7-SEG DISPLAY FOR L
MVI C,C7H ;; C <- 199DEC == L IN
;; NEGATIVE LOGIC
CALL DISPLAY ;; GET DISPLAY
MVI B,01H ;; GET 7-SEG DISPLAY FOR O
MVI C,C0H ;; C <- 11000000 == O
;; IN NEGATIVE LOGIC
CALL DISPLAY ;; CALL DISPLAY
JMP START ;; WE ARE DONE
FORM_NEGATIVE: ;; THE FROM_NEGATIVE
;; JUST SENDS '-'
;; TO THE SCREEN AND
;; THEN POINTS TO
;; FORM_NUMBER
MOV D,A ;; TEMPORARY SAVE A
MVI B,04H ;; GET 7-SEG DISPLAY FOR '-'
MVI C,BFH ;; C <- 10111111 == '-'
;; IN NEGATIVE LOGIC
CALL DISPLAY ;; CALL DISPLAY
MOV A,D ;; RESTORE A
ANI 7FH ;; A <- A && 0111 1111
;; AKA REMOVE THE
;; 'MINUS OPERAND BIT'
JMP FORM_NUMBER ;; POINT TO FORM_NUMBER
FORM_NUMBER: ;; CONVERT THE NUMBER
;; TO DECIMAL
;; DECREASE BY 10 UNTIL
;; THE NUMBER IS LES THAN 10
;; E COUNTS THE 10s
;; THAT WE GET
MOV D,A ;; SAVE THE VALUE
;; OF A TEMPORARY
MVI E,00H ;; INITIALIZE THE COUNTER
CPI 0AH ;; COMPARE TO 10DEC
JC SEND_OUT ;; ON LESS JUMP TO SEND_OUT
CONVERT:
SUI 0AH ;; A - 10DEC
INR E ;; E++
CPI 0AH ;; COMPARE TO 10
JC SEND_OUT ;; ON LESS JUMP TO SEND_OUT
JMP CONVERT
SEND_OUT: ;; MATCH A VALUE
;; BETWEEN 0 AND 9
MOV D,A ;; SAVE 100s OF NUMBER
MOV A,E ;; GET NUMBER OF 10s
MVI H,09H ;; LOAD ADDRESS WHERE
;; NUMBERS STORED START
MOV L,A ;; SAVE NUMBERS
;; OF TENS ON L
MOV A,M ;; MOVE CONTENT OF
;; MEMORY ADDRESS
;; CORRESPONDING NUMBER TO A
MVI B,02H ;; GET 7-SEG DISPLAY FOR 10s
MOV C,A ;; SAVE NUMBER ON C
CALL DISPLAY ;; DISPLAY 10s
MOV A,D ;; RESTORE A
MVI H,09H ;; LOAD AGAIN ADDRESS
;; WHERE NUMBERS ARE STORED
MOV L,A ;; PLACE DIGIT OF 100s
MOV A,M ;; LOAD ALL TO A
MVI B,01H ;; GET 7-SEG DISPLAY FOR 100s
MOV C,A ;; RESTORE A
CALL DISPLAY ;; DISPLAY 100s
JMP START ;; GET NEW NUMBER
DISPLAY: ;; WITH DISPLAY WE DECIDE
;; WICH DISPLAY TO USE
MVI A,FFH ;; PREPARE DISPLAYS FOR
;; PRINTING MESSAGE
STA 3800H ;; SEND OUT
MOV A,B ;; SET SCANING GATE
;; AKA CHOOSE DISPLAYS
STA 2800H ;; SEND OUT
MOV A,C ;; SENDS THE SYMBOLS
;; TO SEND OUT
STA 3800H ;; SEND OUT
RET
ORG 0900H ;; 7-SEGMENT CODE FOR SYMBOLS
;; 1-9 ALWAYS IN NEGATIVE LOGIC
DB C0H ;; 7-SEGMENT CODE FOR 0
DB F9H ;; 7-SEGMENT CODE FOR 1
DB A4H ;; 7-SEGMENT CODE FOR 2
DB B0H ;; 7-SEGMENT CODE FOR 3
DB 99H ;; 7-SEGMENT CODE FOR 4
DB 92H ;; 7-SEGMENT CODE FOR 5
DB 82H ;; 7-SEGMENT CODE FOR 6
DB F8H ;; 7-SEGMENT CODE FOR 7
DB 80H ;; 7-SEGMENT CODE FOR 8
DB 90H ;; 7-SEGMENT CODE FOR 9
END
